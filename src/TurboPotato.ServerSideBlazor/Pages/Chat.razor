@page "/chat"

@using TurboPotato.ServerSideBlazor.Data
@using System.Net.Http
@using Jil

@inject InMemoryChatMessageRepository ChatMessageRepository
@inject IHttpClientFactory HttpClientFactory

<h1>Chat</h1>

<h2>Username</h2>
<input type="text" bind="@Username" />

<br />

<h2>Chat activity</h2>
<div>
    @foreach (var message in ChatMessages)
    {
        <h3>@message.From</h3>
        <i>@message.SentAtUtc</i>
        <p>@message.Message</p>
    }
</div>

<br />

<h2>Enter message</h2>
<input type="text" bind="MessageToSend" />
<button onclick="@SendMessageAsync">Send</button>

@functions {
    private HttpClient httpClient;

    private const string ApiEndpoint = "https://localhost:5001/api";

    public string Username { get; set; }
    public string MessageToSend { get; set; }

    public IReadOnlyList<ChatMessage> ChatMessages { get; set; }

    protected override async Task OnInitAsync()
    {
        ChatMessages = Array.Empty<ChatMessage>();

        httpClient = HttpClientFactory.CreateClient();

        while (true)
        {
            ChatMessages = await GetMessagesAsync();
            StateHasChanged();

            await Task.Delay(1000);
        }
    }

    private async Task SendMessageAsync()
    {
        var message = MessageToSend;
        MessageToSend = null;

        if (message != null)
        {
            await AddChatMessageAsync(message);
        }
    }

    private async Task AddChatMessageAsync(string message)
    {
        var messageObject = new ChatMessage()
        {
            Message = message,
            From = Username,
            SentAtUtc = DateTime.UtcNow
        };

        var json = JSON.Serialize(messageObject);
        await httpClient.PutAsync(ApiEndpoint, new StringContent(json));
    }

    private async Task<IReadOnlyList<ChatMessage>> GetMessagesAsync()
    {
        var json = await httpClient.GetStringAsync(ApiEndpoint);
        return JSON.Deserialize<ChatMessage[]>(json);
    }

}